<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-07T14:29:06-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Kevin’s Project Journal</title><subtitle>Rolling along.</subtitle><entry><title type="html">8-Bit Computer - EEPROM Programming Part I</title><link href="http://localhost:4000/webpage/2023/10/15/eeprom_adventures.html" rel="alternate" type="text/html" title="8-Bit Computer - EEPROM Programming Part I" /><published>2023-10-15T14:00:10-04:00</published><updated>2023-10-15T14:00:10-04:00</updated><id>http://localhost:4000/webpage/2023/10/15/eeprom_adventures</id><content type="html" xml:base="http://localhost:4000/webpage/2023/10/15/eeprom_adventures.html"><![CDATA[<h1 id="8-bit-computer---eeprom-programmer">8-Bit Computer - EEPROM Programmer</h1>

<p>Continuing the build out of Ben Eater’s super cool 8 bit computer kit.
<a href="https://eater.net/8bit/">8bit</a></p>

<p>Constructed the EEPROM programmer. With prograbably my worst wiring to date.</p>

<p>EEPROM Programmer
<img src="/assets/images/programmer.jpg" alt="programmer" /></p>

<p>Ran into difficulties programming the AT28C16 chip. Long story short, swapped it with one of the other 2 available. And it worked! Bad chip.</p>

<p>Unfortunately the AT28C16 is discontinued and no longer available on Jamco or Mouser. Luckily the AT28C64 is! And has a ‘mostly’ similar pin layout. 
Frustrated, I pulled out a TL66II+ programmer instead of updating the bread board programmer.</p>

<p>Fancy Programmer
<img src="/assets/images/eeprom_programmer.jpg" alt="fancy_programmer" /></p>

<p>Steps Followed:</p>
<ol>
  <li>Installed <a href="https://gitlab.com/DavidGriffith/minipro/">minipro</a></li>
  <li>Searched for the chip with cmd line: $ minipro -L AT28C64B</li>
  <li>
    <p>Write some hex as a binary file.</p>

    <p>import binascii
 test = [0x81, 0xcf, 0x92, 0x86, 0xcc, 0xa4, 0xa0, 0x8f, 0x80, 0x84, 0x88, 0xe0, 0xb1, 0xc2, 0xb0, 0xb8 ]</p>

    <p>with open(‘file.bin’, ‘wb’) as bin_file:
     for x in test:
         print(bytes((x,)))
         bin_file.write(bytes((x,)))</p>
  </li>
  <li>View file with $ xxd -b file.bin</li>
  <li>Program the chip with $ minipro -p AT28C64B -w file.bin -s</li>
  <li>Verify by reading the chip to a new file with $ minipro -p AT28C64B -r test.bin -s</li>
</ol>

<p>Side Note: My brain must have been in dumb mode. I checked amazon. . . AT28C16’s are available for a couple bucks.</p>]]></content><author><name></name></author><category term="webpage" /><summary type="html"><![CDATA[8-Bit Computer - EEPROM Programmer]]></summary></entry><entry><title type="html">8-Bit Computer - Program Counter</title><link href="http://localhost:4000/webpage/2023/08/10/program_counter_memory.html" rel="alternate" type="text/html" title="8-Bit Computer - Program Counter" /><published>2023-08-10T14:00:10-04:00</published><updated>2023-08-10T14:00:10-04:00</updated><id>http://localhost:4000/webpage/2023/08/10/program_counter_memory</id><content type="html" xml:base="http://localhost:4000/webpage/2023/08/10/program_counter_memory.html"><![CDATA[<h1 id="8-bit-computer---program-counter-and-memory">8-Bit Computer - Program Counter and Memory</h1>

<p>The Ben Eater 8-bit computer kit is awesome. 
<a href="https://eater.net/8bit/">8bit</a></p>

<p>Just completed the Program Counter and Memory components.</p>

<p>Memory
<img src="/assets/images/mem.jpg" alt="mem" /></p>

<p>Program Counter
<img src="/assets/images/pc.jpg" alt="pc" /></p>

<p>Note: Ran into an issue after completing the program counter where it would just repeat count 1. 
Pin 1 needs to be tied to 5V on the LS161AN Adder. Allowing it to float causes it to reset.</p>]]></content><author><name></name></author><category term="webpage" /><summary type="html"><![CDATA[8-Bit Computer - Program Counter and Memory]]></summary></entry><entry><title type="html">8-Bit Computer - ALU Complete</title><link href="http://localhost:4000/webpage/2023/08/05/alu_complete.html" rel="alternate" type="text/html" title="8-Bit Computer - ALU Complete" /><published>2023-08-05T14:00:10-04:00</published><updated>2023-08-05T14:00:10-04:00</updated><id>http://localhost:4000/webpage/2023/08/05/alu_complete</id><content type="html" xml:base="http://localhost:4000/webpage/2023/08/05/alu_complete.html"><![CDATA[<h1 id="8-bit-computer---alu-unit-and-5v-leds">8-Bit Computer - ALU Unit and 5V LEDs</h1>

<p>Finally wrapped up the 8-bit ALU build out with working addition and subtraction and new 5V LEDs!
<img src="/assets/images/alu_complete.jpg" alt="alu_complete" /></p>

<p>Along the journey ended up re-wiring the horrifying wiring job I started with. Photo I took along the way before replacing LED’s
<img src="/assets/images/alu_clean_wiring.jpg" alt="alu_wip" /></p>

<p>On another note, following some build advice on the Ben Eater subreddit I swapped out the kit provided LEDs with some 3mm diffuse 5V LEDs. These are a pretty big improvement and don’t need a resistor to keep from (continually) burning out.</p>

<p>5V LED’s I used from Digikey:
<a href="https://www.digikey.com/en/products/detail/kingbright/WP710A10ID5V/3084187">Red 5V LEDs</a></p>]]></content><author><name></name></author><category term="webpage" /><summary type="html"><![CDATA[8-Bit Computer - ALU Unit and 5V LEDs]]></summary></entry><entry><title type="html">8-Bit Computer Part II - ALU All Day</title><link href="http://localhost:4000/webpage/2023/07/10/eight_bit_alu.html" rel="alternate" type="text/html" title="8-Bit Computer Part II - ALU All Day" /><published>2023-07-10T14:00:10-04:00</published><updated>2023-07-10T14:00:10-04:00</updated><id>http://localhost:4000/webpage/2023/07/10/eight_bit_alu</id><content type="html" xml:base="http://localhost:4000/webpage/2023/07/10/eight_bit_alu.html"><![CDATA[<h1 id="8-bit-computer---alu-unit">8-Bit Computer - ALU Unit</h1>

<p>The ALU unit is “fun”.</p>

<p>First attempt at drawing. “The paper and pen attempt”. Failed after I started taping sheets of paper together. This feels like it would quickly lead to madness.
<img src="/assets/images/pen_and_paper.jpg" alt="pen_and_paper" /></p>

<p>Second attempt at drawing. “The whiteboard attempt” Failed after I started crossing wires and smudging everything to kingdom come.
<img src="/assets/images/whiteboard.jpg" alt="whiteboard" /></p>

<p>Third attempt at drawing. “Start to play around with KiCAD”
<img src="/assets/images/kicad_1.png" alt="registers" /></p>]]></content><author><name></name></author><category term="webpage" /><summary type="html"><![CDATA[8-Bit Computer - ALU Unit]]></summary></entry><entry><title type="html">8-Bit Computer Part I - Clock and RAM</title><link href="http://localhost:4000/webpage/2023/07/09/eight_bit_build.html" rel="alternate" type="text/html" title="8-Bit Computer Part I - Clock and RAM" /><published>2023-07-09T14:00:10-04:00</published><updated>2023-07-09T14:00:10-04:00</updated><id>http://localhost:4000/webpage/2023/07/09/eight_bit_build</id><content type="html" xml:base="http://localhost:4000/webpage/2023/07/09/eight_bit_build.html"><![CDATA[<h1 id="8-bit-computer">8-Bit Computer</h1>

<p>Ben Eater has a great 8-bit computer kit and video lecture series. The kit is pretty kick-ass.</p>

<p><a href="https://eater.net/8bit/">8bit</a></p>

<h1 id="build-out">Build Out</h1>

<p>Breezed through the Clock and RAM/Register Modules.</p>

<p>Register Aseembly
<img src="/assets/images/registers.jpg" alt="registers" /></p>

<p>Register Testing
<img src="/assets/images/register_testing.jpg" alt="registers" /></p>]]></content><author><name></name></author><category term="webpage" /><summary type="html"><![CDATA[8-Bit Computer]]></summary></entry><entry><title type="html">FreeBSD and QEMU</title><link href="http://localhost:4000/webpage/2023/07/07/qemu-freebsd.html" rel="alternate" type="text/html" title="FreeBSD and QEMU" /><published>2023-07-07T14:00:10-04:00</published><updated>2023-07-07T14:00:10-04:00</updated><id>http://localhost:4000/webpage/2023/07/07/qemu-freebsd</id><content type="html" xml:base="http://localhost:4000/webpage/2023/07/07/qemu-freebsd.html"><![CDATA[<h1 id="qemu-and-freebsd">QEMU and FreeBSD!</h1>

<p>Setup a new Linux box with a good amount of RAM. Decided to play around with QEMU and FreeBSD a bit!</p>

<ol>
  <li>Installed QEMU and Virtual Machine Manager</li>
  <li>Played with settings a fair bit.</li>
  <li>Setup a FreeBSD VM.</li>
  <li>Figured out how to setup Gnome</li>
  <li>Figured out which virtual machine settings to enable in BIOS to get decent performance.</li>
</ol>

<p><img src="/assets/images/free_bsd_loading.png" alt="loading_screen" />
Loading. . .</p>

<p>(Also Charlie Root threw me for a loop.)</p>

<p><img src="/assets/images/free_bsd_startup.png" alt="startup" /></p>]]></content><author><name></name></author><category term="webpage" /><summary type="html"><![CDATA[QEMU and FreeBSD!]]></summary></entry><entry><title type="html">Listen to This</title><link href="http://localhost:4000/webpage/2023/07/02/sdr-notes.html" rel="alternate" type="text/html" title="Listen to This" /><published>2023-07-02T12:59:10-04:00</published><updated>2023-07-02T12:59:10-04:00</updated><id>http://localhost:4000/webpage/2023/07/02/sdr-notes</id><content type="html" xml:base="http://localhost:4000/webpage/2023/07/02/sdr-notes.html"><![CDATA[<h1 id="software-defined-radio-sdr">Software Defined Radio (SDR)</h1>

<p>It’s 4th of July weekend, chances are someoneone, somewhere is listening to a radio. Its a opportunity as any to pull out the SDR dongle I have had sitting in my drawer.</p>

<p>Tampa 93.3 FM</p>

<p><img src="/assets/images/gqrx.png" alt="dongle" /></p>

<h2 id="materials">Materials</h2>

<ol>
  <li>Software Defined Radio &amp; Antenna
<a href="https://www.amazon.com/RTL-SDR-Blog-RTL2832U-Software-Defined/dp/B0BMKZCKTF/ref=sr_1_3?crid=2BWETTH1T2F05&amp;keywords=SDR%2BRTL&amp;qid=1688314911&amp;sprefix=sdr%2Brtl%2Caps%2C101&amp;sr=8-3&amp;th=1">RTL-SDR Blog V3 Amazon</a></li>
</ol>

<p><img src="/assets/images/IMG_0961.jpg" alt="dongle" /></p>

<p><img src="/assets/images/IMG_0962.jpg" alt="antenna" /></p>

<h2 id="setup">Setup</h2>

<ol>
  <li>Software (GQRX SRD)
<a href="https://gqrx.dk/">gqrx open source sofwawre defined radio</a></li>
</ol>

<h2 id="helpful-links">Helpful Links</h2>

<p><a href="https://www.rtl-sdr.com/">RTL-SDR.com</a></p>]]></content><author><name></name></author><category term="webpage" /><summary type="html"><![CDATA[Software Defined Radio (SDR)]]></summary></entry><entry><title type="html">Webpage, Setup Notes!</title><link href="http://localhost:4000/webpage/2023/06/24/webpage-setup-notes.html" rel="alternate" type="text/html" title="Webpage, Setup Notes!" /><published>2023-06-24T15:43:10-04:00</published><updated>2023-06-24T15:43:10-04:00</updated><id>http://localhost:4000/webpage/2023/06/24/webpage-setup-notes</id><content type="html" xml:base="http://localhost:4000/webpage/2023/06/24/webpage-setup-notes.html"><![CDATA[<p>Going for a simple webpage setup I ran with github pages, jekyll and a custom domain from google domains.</p>

<p>Github Pages -&gt; https://docs.github.com/en/pages/quickstart</p>

<p>Helpful Jekyll docs -&gt; https://jekyllrb.com/</p>

<p>Helpful Google Domains configuration -&gt; https://www.joelotz.com/blog/2020/setup-google-domain-for-github-pages.html</p>

<p>Side quests. Brand new computer, had to setup SSH auth for github. One fun bug, setting up the wrong CNAME url was a hilarious introduction to the TTL field I 
completely ignored. The hour long wait definitely was the most frustrating part of this setup.</p>]]></content><author><name></name></author><category term="webpage" /><summary type="html"><![CDATA[Going for a simple webpage setup I ran with github pages, jekyll and a custom domain from google domains.]]></summary></entry></feed>